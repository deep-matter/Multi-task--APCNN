#!bin/python

from .layers import LinearProjection
from torch_geometric.nn import GATConv
import torch.nn as nn 
import tocch 
import torch.nn.Functional as F 


class GraphEncoder(nn.Module):
	def __init__(self, config ,**kagrs):
		super(GraphEncoder,self).__init__()
		# configrstion the hyperparams 

		"""
		We use MPAN on each SMILES string to generate
		the feature vector T (di)
		mpan, which contains information
		on both atoms, chemical bonds and graph structure
		of the drug. Compared with the traditional Graph
		Convolutional Network (GCN), MPAN pays attention
		to both neighbor nodes and connected edges between
		nodes when updating node features. Therefore, the
		features generated by MPAN can adequately represent
		the 2D structural information of drug

		args :
		node_feat: the features the Adjancy 
		edegs_feat: the features the raltion the between of node 

		"""
		self.arg = config
		self.conv1 = GATConv(self.arg.in_features , self.arg.hidden_channel,self.head= heads, self.arg.out_channel, dropout=0.6)
		self.conv2 = GATConv(self.arg.hidden_channel * self.arg.self.head,self.arg.out_features,dropout=0.6)
		self.projector = self.LinearProjection(self.arg.in_features,self.arg.hidden_channel )
		self.nrom = nn.LayerNorm(self.out_channel)

	def forard(self,node_feat , edge_feat):
		x = F.dropout(node_feat, p=0.6, training  = self.training)
		x = F.elu(self.conv1(x, edged_feat))
		x = F.dropout(x,p = 0.6, training=self.training)
		x = self.conv2(x,edge_feat)
		x = self.norm(x)
		return self.projector(x)



